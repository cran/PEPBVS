// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <RcppGSL.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// pepmarginallikelihoodc
List pepmarginallikelihoodc(arma::mat x, NumericVector y, arma::mat xnew, bool pred, bool intrinsic, double d0, double d1, int k0, double R0);
RcppExport SEXP _PEPBVS_pepmarginallikelihoodc(SEXP xSEXP, SEXP ySEXP, SEXP xnewSEXP, SEXP predSEXP, SEXP intrinsicSEXP, SEXP d0SEXP, SEXP d1SEXP, SEXP k0SEXP, SEXP R0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type xnew(xnewSEXP);
    Rcpp::traits::input_parameter< bool >::type pred(predSEXP);
    Rcpp::traits::input_parameter< bool >::type intrinsic(intrinsicSEXP);
    Rcpp::traits::input_parameter< double >::type d0(d0SEXP);
    Rcpp::traits::input_parameter< double >::type d1(d1SEXP);
    Rcpp::traits::input_parameter< int >::type k0(k0SEXP);
    Rcpp::traits::input_parameter< double >::type R0(R0SEXP);
    rcpp_result_gen = Rcpp::wrap(pepmarginallikelihoodc(x, y, xnew, pred, intrinsic, d0, d1, k0, R0));
    return rcpp_result_gen;
END_RCPP
}
// full_enumeration_pepc
List full_enumeration_pepc(arma::mat x, arma::mat gamma, NumericVector y, bool intrinsic, bool reference_prior);
RcppExport SEXP _PEPBVS_full_enumeration_pepc(SEXP xSEXP, SEXP gammaSEXP, SEXP ySEXP, SEXP intrinsicSEXP, SEXP reference_priorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< bool >::type intrinsic(intrinsicSEXP);
    Rcpp::traits::input_parameter< bool >::type reference_prior(reference_priorSEXP);
    rcpp_result_gen = Rcpp::wrap(full_enumeration_pepc(x, gamma, y, intrinsic, reference_prior));
    return rcpp_result_gen;
END_RCPP
}
// mc3_pepc
arma::mat mc3_pepc(arma::mat x, NumericVector y, bool betabinom, int itermc3, double current_Rsq, double current_marginal, double current_logpost, arma::rowvec current_gamma, bool intrinsic, bool reference_prior);
RcppExport SEXP _PEPBVS_mc3_pepc(SEXP xSEXP, SEXP ySEXP, SEXP betabinomSEXP, SEXP itermc3SEXP, SEXP current_RsqSEXP, SEXP current_marginalSEXP, SEXP current_logpostSEXP, SEXP current_gammaSEXP, SEXP intrinsicSEXP, SEXP reference_priorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< bool >::type betabinom(betabinomSEXP);
    Rcpp::traits::input_parameter< int >::type itermc3(itermc3SEXP);
    Rcpp::traits::input_parameter< double >::type current_Rsq(current_RsqSEXP);
    Rcpp::traits::input_parameter< double >::type current_marginal(current_marginalSEXP);
    Rcpp::traits::input_parameter< double >::type current_logpost(current_logpostSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type current_gamma(current_gammaSEXP);
    Rcpp::traits::input_parameter< bool >::type intrinsic(intrinsicSEXP);
    Rcpp::traits::input_parameter< bool >::type reference_prior(reference_priorSEXP);
    rcpp_result_gen = Rcpp::wrap(mc3_pepc(x, y, betabinom, itermc3, current_Rsq, current_marginal, current_logpost, current_gamma, intrinsic, reference_prior));
    return rcpp_result_gen;
END_RCPP
}
// predict_pepc
List predict_pepc(arma::mat x, arma::mat gamma, NumericVector y, arma::mat xnew, bool intrinsic, bool reference_prior);
RcppExport SEXP _PEPBVS_predict_pepc(SEXP xSEXP, SEXP gammaSEXP, SEXP ySEXP, SEXP xnewSEXP, SEXP intrinsicSEXP, SEXP reference_priorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type xnew(xnewSEXP);
    Rcpp::traits::input_parameter< bool >::type intrinsic(intrinsicSEXP);
    Rcpp::traits::input_parameter< bool >::type reference_prior(reference_priorSEXP);
    rcpp_result_gen = Rcpp::wrap(predict_pepc(x, gamma, y, xnew, intrinsic, reference_prior));
    return rcpp_result_gen;
END_RCPP
}
// test_pepc
List test_pepc(arma::mat x, arma::mat gamma, NumericVector y, bool intrinsic, bool reference_prior, int k0, double R0);
RcppExport SEXP _PEPBVS_test_pepc(SEXP xSEXP, SEXP gammaSEXP, SEXP ySEXP, SEXP intrinsicSEXP, SEXP reference_priorSEXP, SEXP k0SEXP, SEXP R0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< bool >::type intrinsic(intrinsicSEXP);
    Rcpp::traits::input_parameter< bool >::type reference_prior(reference_priorSEXP);
    Rcpp::traits::input_parameter< int >::type k0(k0SEXP);
    Rcpp::traits::input_parameter< double >::type R0(R0SEXP);
    rcpp_result_gen = Rcpp::wrap(test_pepc(x, gamma, y, intrinsic, reference_prior, k0, R0));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_PEPBVS_pepmarginallikelihoodc", (DL_FUNC) &_PEPBVS_pepmarginallikelihoodc, 9},
    {"_PEPBVS_full_enumeration_pepc", (DL_FUNC) &_PEPBVS_full_enumeration_pepc, 5},
    {"_PEPBVS_mc3_pepc", (DL_FUNC) &_PEPBVS_mc3_pepc, 10},
    {"_PEPBVS_predict_pepc", (DL_FUNC) &_PEPBVS_predict_pepc, 6},
    {"_PEPBVS_test_pepc", (DL_FUNC) &_PEPBVS_test_pepc, 7},
    {NULL, NULL, 0}
};

RcppExport void R_init_PEPBVS(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
